# Generated by Django 3.1.7 on 2021-06-02 08:09

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('sn', models.CharField(db_column='SN', max_length=32)),
                ('type', models.CharField(db_column='TYPE', max_length=32)),
                ('mmac', models.CharField(db_column='MMAC', max_length=32)),
                ('mip', models.CharField(db_column='MIP', max_length=32)),
                ('mfr_time', models.DateTimeField(blank=True, db_column='MFR_TIME', null=True)),
                ('created_by', models.CharField(blank=True, db_column='CREATED_BY', max_length=32, null=True)),
                ('created_time', models.DateTimeField(blank=True, db_column='CREATED_TIME', null=True)),
                ('updated_by', models.CharField(blank=True, db_column='UPDATED_BY', max_length=32, null=True)),
                ('updated_time', models.DateTimeField(blank=True, db_column='UPDATED_TIME', null=True)),
            ],
            options={
                'db_table': 'ego_device',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Pcateory',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='NAME', max_length=32)),
            ],
            options={
                'db_table': 'ego_pcateory',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Pgroup',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, db_column='NAME', max_length=128, null=True)),
                ('decription', models.TextField(blank=True, db_column='DECRIPTION', null=True)),
                ('created_by', models.CharField(blank=True, db_column='CREATED_BY', max_length=32, null=True)),
                ('created_time', models.DateTimeField(blank=True, db_column='CREATED_TIME', null=True)),
                ('updated_by', models.CharField(blank=True, db_column='UPDATED_BY', max_length=32, null=True)),
                ('updated_time', models.DateTimeField(blank=True, db_column='UPDATED_TIME', null=True)),
                ('pid', models.ForeignKey(blank=True, db_column='pid', null=True, on_delete=django.db.models.deletion.SET_NULL, to='problem.pgroup')),
            ],
            options={
                'db_table': 'ego_pgroup',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('problem_id', models.CharField(db_column='PROBLEM_ID', max_length=32)),
                ('puid', models.CharField(blank=True, db_column='PUID', max_length=32, null=True)),
                ('name', models.CharField(db_column='NAME', max_length=128)),
                ('problem_decription', models.TextField(blank=True, db_column='PROBLEM_DECRIPTION', null=True)),
                ('module_decription', models.TextField(blank=True, db_column='MODULE_DECRIPTION', null=True)),
                ('input_decription', models.TextField(blank=True, db_column='INPUT_DECRIPTION', null=True)),
                ('output_decription', models.TextField(blank=True, db_column='OUTPUT_DECRIPTION', null=True)),
                ('test_decription', models.CharField(blank=True, db_column='TEST_DECRIPTION', max_length=32, null=True)),
                ('difficulty', models.IntegerField(blank=True, db_column='DIFFICULTY', null=True)),
                ('resource_limit', models.DecimalField(blank=True, db_column='RESOURCE_LIMIT', decimal_places=10, max_digits=32, null=True)),
                ('freq_limit', models.DecimalField(blank=True, db_column='FREQ_LIMIT', decimal_places=10, max_digits=32, null=True)),
                ('power_limit', models.DecimalField(blank=True, db_column='POWER_LIMIT', decimal_places=10, max_digits=32, null=True)),
                ('public_status', models.IntegerField(blank=True, db_column='PUBLIC_STATUS', null=True)),
                ('platform', models.IntegerField(blank=True, db_column='PLATFORM', null=True)),
                ('publish_status', models.IntegerField(blank=True, db_column='PUBLISH_STATUS', null=True)),
                ('pcateory', models.CharField(blank=True, db_column='PCATEORY', max_length=1024, null=True)),
                ('ptag', models.CharField(blank=True, db_column='PTAG', max_length=1024, null=True)),
                ('source', models.CharField(blank=True, db_column='SOURCE', max_length=1024, null=True)),
                ('online_testbench', models.CharField(blank=True, db_column='ONLINE_TESTBENCH', max_length=1024, null=True)),
                ('online_testbench_md5', models.CharField(blank=True, db_column='ONLINE_TESTBENCH_MD5', max_length=128, null=True)),
                ('board_testbench', models.CharField(blank=True, db_column='BOARD_TESTBENCH', max_length=1024, null=True)),
                ('board_testbench_md5', models.CharField(blank=True, db_column='BOARD_TESTBENCH_MD5', max_length=128, null=True)),
                ('created_by', models.CharField(blank=True, db_column='CREATED_BY', max_length=32, null=True)),
                ('created_time', models.DateTimeField(blank=True, db_column='CREATED_TIME', null=True)),
                ('updated_by', models.CharField(blank=True, db_column='UPDATED_BY', max_length=32, null=True)),
                ('updated_time', models.DateTimeField(blank=True, db_column='UPDATED_TIME', null=True)),
            ],
            options={
                'db_table': 'ego_problem',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Psource',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('type', models.IntegerField(blank=True, db_column='TYPE', null=True)),
                ('source', models.CharField(blank=True, db_column='SOURCE', max_length=128, null=True)),
                ('decription', models.CharField(blank=True, db_column='DECRIPTION', max_length=1024, null=True)),
                ('created_by', models.CharField(blank=True, db_column='CREATED_BY', max_length=32, null=True)),
                ('created_time', models.DateTimeField(blank=True, db_column='CREATED_TIME', null=True)),
                ('updated_by', models.CharField(blank=True, db_column='UPDATED_BY', max_length=32, null=True)),
                ('updated_time', models.DateTimeField(blank=True, db_column='UPDATED_TIME', null=True)),
            ],
            options={
                'db_table': 'ego_psource',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Ptag',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, db_column='NAME', max_length=32, null=True)),
                ('created_by', models.CharField(blank=True, db_column='CREATED_BY', max_length=32, null=True)),
                ('created_time', models.DateTimeField(blank=True, db_column='CREATED_TIME', null=True)),
                ('updated_by', models.CharField(blank=True, db_column='UPDATED_BY', max_length=32, null=True)),
                ('updated_time', models.DateTimeField(blank=True, db_column='UPDATED_TIME', null=True)),
            ],
            options={
                'db_table': 'ego_ptag',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Proptag',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('created_by', models.CharField(blank=True, db_column='CREATED_BY', max_length=32, null=True)),
                ('created_time', models.DateTimeField(blank=True, db_column='CREATED_TIME', null=True)),
                ('updated_by', models.CharField(blank=True, db_column='UPDATED_BY', max_length=32, null=True)),
                ('updated_time', models.DateTimeField(blank=True, db_column='UPDATED_TIME', null=True)),
                ('problem_id', models.ForeignKey(db_column='problem_id', on_delete=django.db.models.deletion.CASCADE, to='problem.problem')),
                ('ptag_id', models.ForeignKey(db_column='ptag_id', on_delete=django.db.models.deletion.CASCADE, to='problem.ptag')),
            ],
            options={
                'db_table': 'ego_proptag',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Propgroup',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('created_by', models.CharField(blank=True, db_column='CREATED_BY', max_length=32, null=True)),
                ('created_time', models.DateTimeField(blank=True, db_column='CREATED_TIME', null=True)),
                ('updated_by', models.CharField(blank=True, db_column='UPDATED_BY', max_length=32, null=True)),
                ('updated_time', models.DateTimeField(blank=True, db_column='UPDATED_TIME', null=True)),
                ('pgroup_id', models.ForeignKey(db_column='pgroup_id', on_delete=django.db.models.deletion.CASCADE, to='problem.pgroup')),
                ('problem_id', models.ForeignKey(db_column='problem_id', on_delete=django.db.models.deletion.CASCADE, to='problem.problem')),
            ],
            options={
                'db_table': 'ego_propgroup',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Propcate',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('created_by', models.CharField(blank=True, db_column='CREATED_BY', max_length=32, null=True)),
                ('created_time', models.DateTimeField(blank=True, db_column='CREATED_TIME', null=True)),
                ('updated_by', models.CharField(blank=True, db_column='UPDATED_BY', max_length=32, null=True)),
                ('updated_time', models.DateTimeField(blank=True, db_column='UPDATED_TIME', null=True)),
                ('pcateory_id', models.ForeignKey(db_column='pcateory_id', on_delete=django.db.models.deletion.CASCADE, to='problem.pcateory')),
                ('problem_id', models.ForeignKey(db_column='problem_id', on_delete=django.db.models.deletion.CASCADE, to='problem.problem')),
            ],
            options={
                'db_table': 'ego_propcate',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Poprecord',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('status', models.IntegerField(blank=True, db_column='STATUS', null=True)),
                ('datatime', models.DateTimeField(blank=True, db_column='DATATIME', null=True)),
                ('problem_id', models.ForeignKey(db_column='problem_id', on_delete=django.db.models.deletion.CASCADE, to='problem.problem')),
                ('user_id', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'ego_poprecord',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='EgoPrecord',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('token', models.CharField(blank=True, db_column='TOKEN', max_length=32, null=True)),
                ('status', models.IntegerField(blank=True, db_column='STATUS', null=True)),
                ('result', models.IntegerField(blank=True, db_column='RESULT', null=True)),
                ('platform', models.IntegerField(blank=True, db_column='PLATFORM', null=True)),
                ('resource', models.DecimalField(blank=True, db_column='RESOURCE', decimal_places=10, max_digits=32, null=True)),
                ('freq', models.DecimalField(blank=True, db_column='FREQ', decimal_places=10, max_digits=32, null=True)),
                ('power', models.DecimalField(blank=True, db_column='POWER', decimal_places=10, max_digits=32, null=True)),
                ('time', models.DecimalField(blank=True, db_column='TIME', decimal_places=10, max_digits=32, null=True)),
                ('verify_point', models.CharField(blank=True, db_column='VERIFY_POINT', max_length=1024, null=True)),
                ('verify_server_id', models.CharField(blank=True, db_column='VERIFY_SERVER_ID', max_length=32, null=True)),
                ('verify_start_time', models.DateTimeField(blank=True, db_column='VERIFY_START_TIME', null=True)),
                ('verify_finish_time', models.DateTimeField(blank=True, db_column='VERIFY_FINISH_TIME', null=True)),
                ('problem_id', models.ForeignKey(db_column='PROBLEM_ID', on_delete=django.db.models.deletion.CASCADE, to='problem.problem')),
                ('user_id', models.ForeignKey(db_column='USER_ID', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'ego_precord',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Drecord',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('info', models.CharField(blank=True, db_column='INFO', max_length=1024, null=True)),
                ('created_by', models.CharField(blank=True, db_column='CREATED_BY', max_length=32, null=True)),
                ('created_time', models.DateTimeField(blank=True, db_column='CREATED_TIME', null=True)),
                ('updated_by', models.CharField(blank=True, db_column='UPDATED_BY', max_length=32, null=True)),
                ('updated_time', models.DateTimeField(blank=True, db_column='UPDATED_TIME', null=True)),
                ('device_id', models.ForeignKey(db_column='device_id', on_delete=django.db.models.deletion.CASCADE, to='problem.device')),
            ],
            options={
                'db_table': 'ego_drecord',
                'managed': True,
            },
        ),
    ]
