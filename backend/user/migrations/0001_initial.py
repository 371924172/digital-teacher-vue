# Generated by Django 3.1.7 on 2021-05-28 12:28

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('mobile_phone', models.CharField(blank=True, db_column='MOBILE_PHONE', max_length=32, null=True)),
                ('name', models.CharField(blank=True, db_column='NAME', max_length=128, null=True)),
                ('nickname', models.CharField(blank=True, db_column='NICKNAME', max_length=128, null=True)),
                ('wcactoken', models.CharField(blank=True, db_column='WCACTOKEN', max_length=32, null=True)),
                ('id_card_no', models.CharField(blank=True, db_column='ID_CARD_NO', max_length=32, null=True)),
                ('gender', models.CharField(blank=True, db_column='GENDER', max_length=32, null=True)),
                ('birth', models.DateField(blank=True, db_column='BIRTH', null=True)),
                ('avatar', models.ImageField(blank=True, db_column='AVATAR', max_length=32, null=True, upload_to='imgs')),
                ('intro', models.CharField(blank=True, db_column='INTRO', max_length=512, null=True)),
                ('present_address', models.CharField(blank=True, db_column='PRESENT_ADDRESS', max_length=128, null=True)),
                ('email', models.CharField(blank=True, db_column='EMAIL', max_length=32, null=True)),
                ('last_login', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(blank=True, db_column='STATUS', max_length=32, null=True)),
                ('created_by', models.CharField(blank=True, db_column='CREATED_BY', max_length=32, null=True)),
                ('created_time', models.DateTimeField(blank=True, db_column='CREATED_TIME', null=True)),
                ('updated_by', models.CharField(blank=True, db_column='UPDATED_BY', max_length=32, null=True)),
                ('updated_time', models.DateTimeField(blank=True, db_column='UPDATED_TIME', null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'ego_user',
                'managed': True,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
